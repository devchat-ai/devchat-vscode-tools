# disable pylint
# pylint: disable=W0613
# pylint: disable=E1133
# pylint: disable=R1710
# pylint: disable=W0212
# pylint: disable=W0719
# pylint: disable=W3101
# pylint: disable=C0103

from typing import List

from .rpc import rpc_method
from .types import Location, SymbolNode
from .vscode_services import selected_range, visible_range
from .idea_services import IdeaIDEService


class IDEService:
    """
    Client for IDE service

    Usage:
    client = IDEService()
    res = client.ide_language()
    res = client.ide_logging("info", "some message")
    """

    def __init__(self):
        self._result = None

    @rpc_method
    def get_lsp_brige_port(self) -> str:
        return self._result

    @rpc_method
    def install_python_env(self, command_name: str, requirements_file: str) -> str:
        return self._result

    @rpc_method
    def update_slash_commands(self) -> bool:
        return self._result

    @rpc_method
    def ide_language(self) -> str:
        return self._result

    @rpc_method
    def ide_logging(self, level: str, message: str) -> bool:
        """
        level: "info" | "warn" | "error" | "debug"
        """
        return self._result

    @rpc_method
    def get_document_symbols(self, abspath: str) -> List[SymbolNode]:
        return [SymbolNode.parse_obj(node) for node in self._result]

    @rpc_method
    def find_type_def_locations(self, abspath: str, line: int, character: int) -> List[Location]:
        return [Location.parse_obj(loc) for loc in self._result]

    @rpc_method
    def ide_name(self) -> str:
        return self._result
    
    @rpc_method
    def diff_apply(self, filepath, content) -> bool:
        return self._result

    def get_visible_range(self):
        if self.ide_name() == "vscode":
            return visible_range()
        else:
            return IdeaIDEService().get_visible_range()

    def get_selected_range(self):
        if self.ide_name() == "vscode":
            return selected_range()
        else:
            return IdeaIDEService().get_selected_range()
